from typing import Any, ClassVar

import peewee

USE_SQLITE_CONSTRAINT: bool

class Blob:
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, *args, **kwargs) -> Any: ...
    def read(self, *args, **kwargs) -> Any: ...
    def reopen(self, *args, **kwargs) -> Any: ...
    def seek(self, *args, **kwargs) -> Any: ...
    def tell(self, *args, **kwargs) -> Any: ...
    def write(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BloomFilter:
    def __init__(self, *args, **kwargs) -> None: ...
    def add(self, *args, **kwargs) -> Any: ...
    @classmethod
    def calculate_size(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def from_buffer(cls, *args, **kwargs) -> Any: ...
    def to_buffer(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BloomFilterAggregate:
    def __init__(self, *args, **kwargs) -> None: ...
    def finalize(self, *args, **kwargs) -> Any: ...
    def step(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ConnectionHelper:
    def __init__(self, *args, **kwargs) -> None: ...
    def autocommit(self, *args, **kwargs) -> Any: ...
    def changes(self, *args, **kwargs) -> Any: ...
    def last_insert_rowid(self, *args, **kwargs) -> Any: ...
    def set_busy_handler(self, *args, **kwargs) -> Any: ...
    def set_commit_hook(self, *args, **kwargs) -> Any: ...
    def set_rollback_hook(self, *args, **kwargs) -> Any: ...
    def set_update_hook(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class InterfaceError(peewee.PeeweeException): ...

class Node:
    _coerce: ClassVar[bool] = ...
    clone: ClassVar[function] = ...
    coerce: ClassVar[function] = ...
    is_alias: ClassVar[function] = ...
    unwrap: ClassVar[function] = ...
    __sql__: ClassVar[function] = ...
    def copy(self, *args, **kwargs) -> Any: ...

class OperationalError(peewee.DatabaseError): ...

class TableFunction:
    _ncols: ClassVar[None] = ...
    columns: ClassVar[None] = ...
    name: ClassVar[None] = ...
    params: ClassVar[None] = ...
    print_tracebacks: ClassVar[bool] = ...
    @classmethod
    def get_table_columns_declaration(cls, *args, **kwargs) -> Any: ...
    def initialize(self, *args, **kwargs) -> Any: ...
    def iterate(self, *args, **kwargs) -> Any: ...
    @classmethod
    def register(cls, *args, **kwargs) -> Any: ...

class ZeroBlob(peewee.Node):
    def __init__(self, *args, **kwargs) -> None: ...
    def __sql__(self, *args, **kwargs) -> Any: ...

class _TableFunctionImpl:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

def __pyx_unpickle_BloomFilterAggregate(*args, **kwargs) -> Any: ...
def _register_functions(*args, **kwargs) -> Any: ...
def backup(*args, **kwargs) -> Any: ...
def backup_to_file(*args, **kwargs) -> Any: ...
def make_hash(*args, **kwargs) -> Any: ...
def peewee_bloomfilter_add(*args, **kwargs) -> Any: ...
def peewee_bloomfilter_calculate_size(*args, **kwargs) -> Any: ...
def peewee_bloomfilter_contains(*args, **kwargs) -> Any: ...
def peewee_bm25(*args, **kwargs) -> Any: ...
def peewee_bm25f(*args, **kwargs) -> Any: ...
def peewee_lucene(*args, **kwargs) -> Any: ...
def peewee_murmurhash(*args, **kwargs) -> Any: ...
def peewee_rank(*args, **kwargs) -> Any: ...
def register_bloomfilter(*args, **kwargs) -> Any: ...
def register_hash_functions(*args, **kwargs) -> Any: ...
def register_rank_functions(*args, **kwargs) -> Any: ...
def sqlite_get_db_status(*args, **kwargs) -> Any: ...
def sqlite_get_status(*args, **kwargs) -> Any: ...
