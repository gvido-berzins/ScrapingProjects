from peewee import *
from _typeshed import Incomplete
from peewee import ColumnMetadata as ColumnMetadata, ForeignKeyMetadata as ForeignKeyMetadata, IndexMetadata as IndexMetadata, _atomic
from playhouse.pool import _PooledPostgresqlDatabase
from playhouse.postgres_ext import ArrayField as ArrayField, BinaryJSONField as BinaryJSONField, IntervalField as IntervalField

JSONField = BinaryJSONField
basestring = str
NESTED_TX_MIN_VERSION: int
TXN_ERR_MSG: str

class ExceededMaxAttempts(OperationalError): ...

class UUIDKeyField(UUIDField):
    auto_increment: bool
    def __init__(self, *args, **kwargs) -> None: ...

class RowIDField(AutoField):
    field_type: str
    def __init__(self, *args, **kwargs) -> None: ...

class CockroachDatabase(PostgresqlDatabase):
    field_types: Incomplete
    for_update: bool
    nulls_ordering: bool
    release_after_rollback: bool
    def __init__(self, database, *args, **kwargs) -> None: ...
    def get_indexes(self, table, schema: Incomplete | None = ...): ...
    def conflict_statement(self, on_conflict, query): ...
    def conflict_update(self, oc, query): ...
    def extract_date(self, date_part, date_field): ...
    def from_timestamp(self, date_field): ...
    def begin(self, system_time: Incomplete | None = ..., priority: Incomplete | None = ...) -> None: ...
    def atomic(self, system_time: Incomplete | None = ..., priority: Incomplete | None = ...): ...
    def savepoint(self): ...
    def retry_transaction(self, max_attempts: Incomplete | None = ..., system_time: Incomplete | None = ..., priority: Incomplete | None = ...): ...
    def run_transaction(self, cb, max_attempts: Incomplete | None = ..., system_time: Incomplete | None = ..., priority: Incomplete | None = ...): ...

class _crdb_atomic(_atomic):
    def __enter__(self): ...

def run_transaction(db, callback, max_attempts: Incomplete | None = ..., system_time: Incomplete | None = ..., priority: Incomplete | None = ...): ...

class PooledCockroachDatabase(_PooledPostgresqlDatabase, CockroachDatabase): ...
