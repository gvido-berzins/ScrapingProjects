from _typeshed import Incomplete
from playhouse.sqlite_ext import SqliteExtDatabase as SqliteExtDatabase

logger: Incomplete

class ResultTimeout(Exception): ...
class WriterPaused(Exception): ...
class ShutdownException(Exception): ...

class AsyncCursor:
    sql: Incomplete
    params: Incomplete
    commit: Incomplete
    timeout: Incomplete
    def __init__(self, event, sql, params, commit, timeout) -> None: ...
    def set_result(self, cursor, exc: Incomplete | None = ...): ...
    def __iter__(self): ...
    def next(self): ...
    __next__: Incomplete
    @property
    def lastrowid(self): ...
    @property
    def rowcount(self): ...
    @property
    def description(self): ...
    def close(self) -> None: ...
    def fetchall(self): ...
    def fetchone(self): ...
SHUTDOWN = StopIteration
PAUSE: Incomplete
UNPAUSE: Incomplete

class Writer:
    database: Incomplete
    queue: Incomplete
    def __init__(self, database, queue) -> None: ...
    def run(self) -> None: ...
    def wait_unpause(self): ...
    def loop(self, conn): ...
    def execute(self, obj): ...

class SqliteQueueDatabase(SqliteExtDatabase):
    WAL_MODE_ERROR_MESSAGE: str
    def __init__(self, database, use_gevent: bool = ..., autostart: bool = ..., queue_max_size: Incomplete | None = ..., results_timeout: Incomplete | None = ..., *args, **kwargs) -> None: ...
    def get_thread_impl(self, use_gevent): ...
    def queue_size(self): ...
    def execute_sql(self, sql, params: Incomplete | None = ..., commit=..., timeout: Incomplete | None = ...): ...
    def start(self): ...
    def stop(self): ...
    def is_stopped(self): ...
    def pause(self) -> None: ...
    def unpause(self) -> None: ...
    def __unsupported__(self, *args, **kwargs) -> None: ...
    atomic: Incomplete
    transaction: Incomplete
    savepoint: Incomplete

class ThreadHelper:
    queue_max_size: Incomplete
    def __init__(self, queue_max_size: Incomplete | None = ...) -> None: ...
    def event(self): ...
    def queue(self, max_size: Incomplete | None = ...): ...
    def thread(self, fn, *args, **kwargs): ...

class GreenletHelper(ThreadHelper):
    def event(self): ...
    def queue(self, max_size: Incomplete | None = ...): ...
    def thread(self, fn, *args, **kwargs): ...
