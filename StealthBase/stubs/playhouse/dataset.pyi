from peewee import *
from _typeshed import Incomplete
from playhouse.db_url import connect as connect
from playhouse.migrate import SchemaMigrator as SchemaMigrator, migrate as migrate
from playhouse.reflection import Introspector as Introspector

basestring = str

def open_file(f, mode, encoding: str = ...): ...

class DataSet:
    def __init__(self, url, include_views: bool = ..., **kwargs) -> None: ...
    def get_export_formats(self): ...
    def get_import_formats(self): ...
    def __getitem__(self, table): ...
    @property
    def tables(self): ...
    @property
    def views(self): ...
    def __contains__(self, table): ...
    def connect(self, reuse_if_open: bool = ...) -> None: ...
    def close(self) -> None: ...
    def update_cache(self, table: Incomplete | None = ...) -> None: ...
    def get_table_dependencies(self, table): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
    def query(self, sql, params: Incomplete | None = ..., commit: bool = ...): ...
    def transaction(self): ...
    def freeze(self, query, format: str = ..., filename: Incomplete | None = ..., file_obj: Incomplete | None = ..., encoding: str = ..., **kwargs) -> None: ...
    def thaw(self, table, format: str = ..., filename: Incomplete | None = ..., file_obj: Incomplete | None = ..., strict: bool = ..., encoding: str = ..., **kwargs): ...

class Table:
    dataset: Incomplete
    name: Incomplete
    def __init__(self, dataset, name, model_class) -> None: ...
    @property
    def model_class(self): ...
    def __len__(self): ...
    def __iter__(self): ...
    def create_index(self, columns, unique: bool = ...) -> None: ...
    @property
    def columns(self): ...
    def __getitem__(self, item): ...
    def __setitem__(self, item, value) -> None: ...
    def __delitem__(self, item) -> None: ...
    def insert(self, **data): ...
    def update(self, columns: Incomplete | None = ..., conjunction: Incomplete | None = ..., **data): ...
    def find(self, **query): ...
    def find_one(self, **query): ...
    def all(self): ...
    def delete(self, **query): ...
    def freeze(self, *args, **kwargs): ...
    def thaw(self, *args, **kwargs): ...

class Exporter:
    query: Incomplete
    def __init__(self, query) -> None: ...
    def export(self, file_obj) -> None: ...

class JSONExporter(Exporter):
    iso8601_datetimes: Incomplete
    def __init__(self, query, iso8601_datetimes: bool = ...) -> None: ...
    def export(self, file_obj, **kwargs) -> None: ...

class CSVExporter(Exporter):
    def export(self, file_obj, header: bool = ..., **kwargs) -> None: ...

class TSVExporter(CSVExporter):
    def export(self, file_obj, header: bool = ..., **kwargs): ...

class Importer:
    table: Incomplete
    strict: Incomplete
    columns: Incomplete
    def __init__(self, table, strict: bool = ...) -> None: ...
    def load(self, file_obj) -> None: ...

class JSONImporter(Importer):
    def load(self, file_obj, **kwargs): ...

class CSVImporter(Importer):
    def load(self, file_obj, header: bool = ..., **kwargs): ...

class TSVImporter(CSVImporter):
    def load(self, file_obj, header: bool = ..., **kwargs): ...
