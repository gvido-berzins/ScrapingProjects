from peewee import *
from _typeshed import Incomplete
from peewee import sort_models as sort_models
from playhouse.cockroachdb import CockroachDatabase as CockroachDatabase

class Operation:
    migrator: Incomplete
    method: Incomplete
    args: Incomplete
    kwargs: Incomplete
    def __init__(self, migrator, method, *args, **kwargs) -> None: ...
    def execute(self, node) -> None: ...
    def run(self) -> None: ...

def operation(fn): ...
def make_index_name(table_name, columns): ...

class SchemaMigrator:
    explicit_create_foreign_key: bool
    explicit_delete_foreign_key: bool
    database: Incomplete
    def __init__(self, database) -> None: ...
    def make_context(self): ...
    @classmethod
    def from_database(cls, database): ...
    def apply_default(self, table, column_name, field): ...
    def alter_add_column(self, table, column_name, field): ...
    def add_constraint(self, table, name, constraint): ...
    def add_unique(self, table, *column_names): ...
    def drop_constraint(self, table, name): ...
    def add_inline_fk_sql(self, ctx, field): ...
    def add_foreign_key_constraint(self, table, column_name, rel, rel_column, on_delete: Incomplete | None = ..., on_update: Incomplete | None = ...): ...
    def add_column(self, table, column_name, field): ...
    def drop_foreign_key_constraint(self, table, column_name) -> None: ...
    def drop_column(self, table, column_name, cascade: bool = ...): ...
    def rename_column(self, table, old_name, new_name): ...
    def add_not_null(self, table, column): ...
    def drop_not_null(self, table, column): ...
    def alter_column_type(self, table, column, field, cast: Incomplete | None = ...): ...
    def rename_table(self, old_name, new_name): ...
    def add_index(self, table, columns, unique: bool = ..., using: Incomplete | None = ...): ...
    def drop_index(self, table, index_name): ...

class PostgresqlMigrator(SchemaMigrator):
    def set_search_path(self, schema_name): ...
    def rename_table(self, old_name, new_name): ...

class CockroachDBMigrator(PostgresqlMigrator):
    explicit_create_foreign_key: bool
    def add_inline_fk_sql(self, ctx, field) -> None: ...
    def drop_index(self, table, index_name): ...

class MySQLColumn:
    @property
    def is_pk(self): ...
    @property
    def is_unique(self): ...
    @property
    def is_null(self): ...
    def sql(self, column_name: Incomplete | None = ..., is_null: Incomplete | None = ...): ...

class MySQLMigrator(SchemaMigrator):
    explicit_create_foreign_key: bool
    explicit_delete_foreign_key: bool
    def rename_table(self, old_name, new_name): ...
    def get_foreign_key_constraint(self, table, column_name): ...
    def drop_foreign_key_constraint(self, table, column_name): ...
    def add_inline_fk_sql(self, ctx, field) -> None: ...
    def add_not_null(self, table, column): ...
    def drop_not_null(self, table, column): ...
    def rename_column(self, table, old_name, new_name): ...
    def alter_column_type(self, table, column, field, cast: Incomplete | None = ...): ...
    def drop_index(self, table, index_name): ...

class SqliteMigrator(SchemaMigrator):
    column_re: Incomplete
    column_split_re: Incomplete
    column_name_re: Incomplete
    fk_re: Incomplete
    def drop_column(self, table, column_name, cascade: bool = ...): ...
    def rename_column(self, table, old_name, new_name): ...
    def add_not_null(self, table, column): ...
    def drop_not_null(self, table, column): ...
    def alter_column_type(self, table, column, field, cast: Incomplete | None = ...): ...
    def add_constraint(self, table, name, constraint) -> None: ...
    def drop_constraint(self, table, name) -> None: ...
    def add_foreign_key_constraint(self, table, column_name, field, on_delete: Incomplete | None = ..., on_update: Incomplete | None = ...) -> None: ...

def migrate(*operations, **kwargs) -> None: ...
