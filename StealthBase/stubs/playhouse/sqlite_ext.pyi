from peewee import *
from _typeshed import Incomplete
from peewee import ColumnBase, Insert as Insert
from playhouse._sqlite_ext import Blob as Blob, ConnectionHelper as ConnectionHelper, TableFunction as TableFunction, ZeroBlob as ZeroBlob, backup as backup, backup_to_file as backup_to_file, register_bloomfilter as register_bloomfilter, register_hash_functions as register_hash_functions, register_rank_functions as register_rank_functions, sqlite_get_db_status as sqlite_get_db_status, sqlite_get_status as sqlite_get_status

CYTHON_SQLITE_EXTENSIONS: bool
basestring = str
FTS3_MATCHINFO: str
FTS4_MATCHINFO: str
FTS_VERSION: Incomplete
FTS5_MIN_SQLITE_VERSION: Incomplete

class RowIDField(AutoField):
    auto_increment: bool
    column_name: str
    name: str
    required_name: str
    def bind(self, model, name, *args) -> None: ...

class DocIDField(RowIDField):
    column_name: str
    name: str
    required_name: str

class AutoIncrementField(AutoField):
    def ddl(self, ctx): ...

class TDecimalField(DecimalField):
    field_type: str
    def get_modifiers(self) -> None: ...

class JSONPath(ColumnBase):
    def __init__(self, field, path: Incomplete | None = ...) -> None: ...
    @property
    def path(self): ...
    def __getitem__(self, idx): ...
    def append(self, value, as_json: Incomplete | None = ...): ...
    def insert(self, value, as_json: Incomplete | None = ...): ...
    def set(self, value, as_json: Incomplete | None = ...): ...
    def replace(self, value, as_json: Incomplete | None = ...): ...
    def update(self, value): ...
    def remove(self): ...
    def json_type(self): ...
    def length(self): ...
    def children(self): ...
    def tree(self): ...
    def __sql__(self, ctx): ...

class JSONField(TextField):
    field_type: str
    unpack: bool
    def __init__(self, json_dumps: Incomplete | None = ..., json_loads: Incomplete | None = ..., **kwargs) -> None: ...
    def python_value(self, value): ...
    def db_value(self, value): ...
    __eq__: Incomplete
    __ne__: Incomplete
    __gt__: Incomplete
    __ge__: Incomplete
    __lt__: Incomplete
    __le__: Incomplete
    __hash__: Incomplete
    def __getitem__(self, item): ...
    def extract(self, *paths): ...
    def extract_json(self, path): ...
    def extract_text(self, path): ...
    def append(self, value, as_json: Incomplete | None = ...): ...
    def insert(self, value, as_json: Incomplete | None = ...): ...
    def set(self, value, as_json: Incomplete | None = ...): ...
    def replace(self, value, as_json: Incomplete | None = ...): ...
    def update(self, data): ...
    def remove(self, *paths): ...
    def json_type(self): ...
    def length(self, path: Incomplete | None = ...): ...
    def children(self): ...
    def tree(self): ...

class SearchField(Field):
    def __init__(self, unindexed: bool = ..., column_name: Incomplete | None = ..., **k) -> None: ...
    def match(self, term): ...
    @property
    def fts_column_index(self): ...
    def highlight(self, left, right): ...
    def snippet(self, left, right, over_length: str = ..., max_tokens: int = ...): ...

class VirtualTableSchemaManager(SchemaManager): ...

class VirtualModel(Model):
    class Meta:
        arguments: Incomplete
        extension_module: Incomplete
        prefix_arguments: Incomplete
        primary_key: bool
        schema_manager_class: Incomplete
    @classmethod
    def clean_options(cls, options): ...

class BaseFTSModel(VirtualModel):
    @classmethod
    def clean_options(cls, options): ...

class FTSModel(BaseFTSModel):
    docid: Incomplete
    class Meta:
        extension_module: Incomplete
    @classmethod
    def optimize(cls): ...
    @classmethod
    def rebuild(cls): ...
    @classmethod
    def integrity_check(cls): ...
    @classmethod
    def merge(cls, blocks: int = ..., segments: int = ...): ...
    @classmethod
    def automerge(cls, state: bool = ...): ...
    @classmethod
    def match(cls, term): ...
    @classmethod
    def rank(cls, *weights): ...
    @classmethod
    def bm25(cls, *weights): ...
    @classmethod
    def bm25f(cls, *weights): ...
    @classmethod
    def lucene(cls, *weights): ...
    @classmethod
    def search(cls, term, weights: Incomplete | None = ..., with_score: bool = ..., score_alias: str = ..., explicit_ordering: bool = ...): ...
    @classmethod
    def search_bm25(cls, term, weights: Incomplete | None = ..., with_score: bool = ..., score_alias: str = ..., explicit_ordering: bool = ...): ...
    @classmethod
    def search_bm25f(cls, term, weights: Incomplete | None = ..., with_score: bool = ..., score_alias: str = ..., explicit_ordering: bool = ...): ...
    @classmethod
    def search_lucene(cls, term, weights: Incomplete | None = ..., with_score: bool = ..., score_alias: str = ..., explicit_ordering: bool = ...): ...

class FTS5Model(BaseFTSModel):
    rowid: Incomplete
    class Meta:
        extension_module: str
    @classmethod
    def validate_model(cls) -> None: ...
    @classmethod
    def fts5_installed(cls): ...
    @staticmethod
    def validate_query(query): ...
    @staticmethod
    def clean_query(query, replace=...): ...
    @classmethod
    def match(cls, term): ...
    @classmethod
    def rank(cls, *args): ...
    @classmethod
    def bm25(cls, *weights): ...
    @classmethod
    def search(cls, term, weights: Incomplete | None = ..., with_score: bool = ..., score_alias: str = ..., explicit_ordering: bool = ...): ...
    @classmethod
    def search_bm25(cls, term, weights: Incomplete | None = ..., with_score: bool = ..., score_alias: str = ..., explicit_ordering: bool = ...): ...
    @classmethod
    def automerge(cls, level): ...
    @classmethod
    def merge(cls, npages): ...
    @classmethod
    def optimize(cls): ...
    @classmethod
    def rebuild(cls): ...
    @classmethod
    def set_pgsz(cls, pgsz): ...
    @classmethod
    def set_rank(cls, rank_expression): ...
    @classmethod
    def delete_all(cls): ...
    @classmethod
    def integrity_check(cls, rank: int = ...): ...
    @classmethod
    def VocabModel(cls, table_type: str = ..., table: Incomplete | None = ...): ...

def ClosureTable(model_class, foreign_key: Incomplete | None = ..., referencing_class: Incomplete | None = ..., referencing_key: Incomplete | None = ...): ...

class LSMTable(VirtualModel):
    class Meta:
        extension_module: str
        filename: Incomplete
    @classmethod
    def clean_options(cls, options): ...
    @classmethod
    def load_extension(cls, path: str = ...) -> None: ...
    @staticmethod
    def slice_to_expr(key, idx): ...
    @classmethod
    def get_by_id(cls, pk): ...
    @classmethod
    def set_by_id(cls, key, value) -> None: ...
    @classmethod
    def delete_by_id(cls, pk): ...

class SqliteExtDatabase(SqliteDatabase):
    def __init__(self, database, c_extensions: Incomplete | None = ..., rank_functions: bool = ..., hash_functions: bool = ..., regexp_function: bool = ..., bloomfilter: bool = ..., json_contains: bool = ..., *args, **kwargs) -> None: ...
    def row_factory(self, fn) -> None: ...

SQLITE_STATUS_MEMORY_USED: int
SQLITE_STATUS_PAGECACHE_USED: int
SQLITE_STATUS_PAGECACHE_OVERFLOW: int
SQLITE_STATUS_SCRATCH_USED: int
SQLITE_STATUS_SCRATCH_OVERFLOW: int
SQLITE_STATUS_MALLOC_SIZE: int
SQLITE_STATUS_PARSER_STACK: int
SQLITE_STATUS_PAGECACHE_SIZE: int
SQLITE_STATUS_SCRATCH_SIZE: int
SQLITE_STATUS_MALLOC_COUNT: int
SQLITE_DBSTATUS_LOOKASIDE_USED: int
SQLITE_DBSTATUS_CACHE_USED: int
SQLITE_DBSTATUS_SCHEMA_USED: int
SQLITE_DBSTATUS_STMT_USED: int
SQLITE_DBSTATUS_LOOKASIDE_HIT: int
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE: int
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL: int
SQLITE_DBSTATUS_CACHE_HIT: int
SQLITE_DBSTATUS_CACHE_MISS: int
SQLITE_DBSTATUS_CACHE_WRITE: int
SQLITE_DBSTATUS_DEFERRED_FKS: int

def __status__(flag, return_highwater: bool = ...): ...
def __dbstatus__(flag, return_highwater: bool = ..., return_current: bool = ...): ...

class CSqliteExtDatabase(SqliteExtDatabase):
    def __init__(self, *args, **kwargs) -> None: ...
    def init(self, database, replace_busy_handler: bool = ..., **kwargs) -> None: ...
    def on_commit(self, fn): ...
    def on_rollback(self, fn): ...
    def on_update(self, fn): ...
    def changes(self): ...
    @property
    def last_insert_rowid(self): ...
    @property
    def autocommit(self): ...
    def backup(self, destination, pages: Incomplete | None = ..., name: Incomplete | None = ..., progress: Incomplete | None = ...): ...
    def backup_to_file(self, filename, pages: Incomplete | None = ..., name: Incomplete | None = ..., progress: Incomplete | None = ...): ...
    def blob_open(self, table, column, rowid, read_only: bool = ...): ...
    memory_used: Incomplete
    malloc_size: Incomplete
    malloc_count: Incomplete
    pagecache_used: Incomplete
    pagecache_overflow: Incomplete
    pagecache_size: Incomplete
    scratch_used: Incomplete
    scratch_overflow: Incomplete
    scratch_size: Incomplete
    lookaside_used: Incomplete
    lookaside_hit: Incomplete
    lookaside_miss: Incomplete
    lookaside_miss_full: Incomplete
    cache_used: Incomplete
    schema_used: Incomplete
    statement_used: Incomplete
    cache_hit: Incomplete
    cache_miss: Incomplete
    cache_write: Incomplete

def match(lhs, rhs): ...
def get_weights(ncol, raw_weights): ...
def rank(raw_match_info, *raw_weights): ...
def bm25(raw_match_info, *args): ...
