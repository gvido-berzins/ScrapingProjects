from peewee import *
from _typeshed import Incomplete
from peewee import Metadata

def model_to_dict(model, recurse: bool = ..., backrefs: bool = ..., only: Incomplete | None = ..., exclude: Incomplete | None = ..., seen: Incomplete | None = ..., extra_attrs: Incomplete | None = ..., fields_from_query: Incomplete | None = ..., max_depth: Incomplete | None = ..., manytomany: bool = ...): ...
def update_model_from_dict(instance, data, ignore_unknown: bool = ...): ...
def dict_to_model(model_class, data, ignore_unknown: bool = ...): ...
def insert_where(cls, data, where: Incomplete | None = ...): ...

class ReconnectMixin:
    reconnect_errors: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def execute_sql(self, sql, params: Incomplete | None = ..., commit=...): ...

def resolve_multimodel_query(query, key: str = ...): ...

class ThreadSafeDatabaseMetadata(Metadata):
    def __init__(self, *args, **kwargs) -> None: ...
    database: Incomplete
